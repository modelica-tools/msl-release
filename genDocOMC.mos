/*
 * genDocOMC.mos  - HTML documentation generation script for use with Open Modelica
 *
 * Copyright (C) 1998-CurrentYear, Link√∂ping University
 * Copyright (C) 2012-CurrentYear, Dietmar Winkler <dietmar.winkler@dwe.no>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http:www.gnu.org/licenses/>.
 *
 */

/*
 * Generates Modelica documentation automatically in about 8 minutes on Linux, 30 on Windows
 *   Includes Modelica standard libraries
 *   Most Modelica builtin operators
 *   Some non-Modelica-but-used-in-MSL operators
 *   OpenModelica scripting
 *
 * $Id$
 */

echo(true);

setDebugFlags("nogen"); /* Don't generate dll/so-files when instantiating classes (performance) */

/* Some variables need to be provided as env variabels,e.g.,:
 *  $ export MODELICAPATH="/path/to/library/root/dir"
 *  $ export releaseVersion="3.2"
 */
rootDir := getEnvironmentVar("MODELICAPATH");
relVer  := getEnvironmentVar("releaseVersion");
setModelicaPath(rootDir);
loadFile(rootDir+"/ModelicaServices-Variants/Default/ModelicaServices/package.mo");
loadModel(Modelica,{relVer});
loadModel(ModelicaReference);
loadModel(ObsoleteModelica3);
// loadModel(ModelicaTest);
// loadModel(Modelica_LinearSystems2);
// loadModel(BioChem);
getErrorString();

/* Customisation */

// should we generate documentation for OM built-in functions?
genBuiltin := false;
// Defining and creating the output directory for html files:
MSLdir := dirname(getSourceFile(Modelica));
// Define where the HTML files should go:
targetDir := MSLdir+"/Resources/help/";
// Create the target directory:
system("mkdir -p \""+targetDir+"\"");
// Definethe relative path to the root directory
relativeRootDir := "../../../";

getErrorString();

echo(false);
allClassNames:=getClassNames(builtin=genBuiltin,recursive=true,sort=true);
system("date -u +%FT%TZ > tmp");
genTimeStamp := readFile("tmp");
version := "<hr />Generated at " + genTimeStamp +  " by <a href=\"http://openmodelica.org\">OpenModelica</a>" + getVersion() + " using <a href=\"genDocOMC.mos\">genDocOMC.mos</a>";

echo(true);
"classNames";
classNames := getClassNames(builtin=genBuiltin,sort=true);

"Defining functions used in this script...";
loadString("
function filename \"Replace characters that mess with filesystems and shell expansions\"
  input String str;
  output String ostr :=
        OpenModelica.Scripting.stringReplace(
        OpenModelica.Scripting.stringReplace(str,\"/\",\"Division\"),
        \"*\",\"Multiplication\")
;
end filename;

function notLast
  input String str[:];
  output String ostr[:] := str[1:end];
end notLast;

function last
  input String str[:];
  output String ostr := str[end];
end last;

function preSuffixIfNotEmpty
  input String prefix;
  input String str;
  input String suffix;
  output String out := if str <> \"\" then prefix + str + suffix else \"\";
end preSuffixIfNotEmpty;

function head
  input String strs[:];
  output String head;
protected
  String compound := \"\", file;
algorithm
  head :=
\"<head>
  <link href=\\\"style.css\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\" />
  <title>\"+sum(s + \".\" for s in strs[1:end-1])+strs[end]+\"</title>
  </head>
  <body>
  <h1><a href = \\\"index.html\\\">.</a>\";
  for ident in strs[1:end-1] loop
    compound := if compound == \"\" then ident else compound+\".\"+ident;
    file := filename(compound+\".html\");
    head := head + \"<a href = \\\"\"+file+\"\\\">\"+ident+\"</a>.\";
  end for;
  head := head + strs[end] + \"</h1>\";
end head;

function itemString
  input Item item;
  input String version;
  output String res;
protected
  String docInfo, revision;
algorithm
  docInfo := if item.docInfo[1] == \"\"
    then preSuffixIfNotEmpty(\"<h2><a name=\\\"info\\\">Information</a></h2><pre>\", item.comment, \"</pre>\")
    else if OpenModelica.Scripting.regexBool(item.docInfo[1],\"<html>\") or OpenModelica.Scripting.regexBool(item.docInfo[1],\"<HTML>\")
    then \"<h2><a name=\\\"info\\\">Information</a></h2>\" + item.docInfo[1]
    else preSuffixIfNotEmpty(\"<h2><a name=\\\"info\\\">Information</a></h2><pre>\", toHtml(item.docInfo[1]), \"</pre>\");
  revision := if item.docInfo[2] <> \"\" then \"<h2><a name=\\\"revisions\\\">Revisions</a></h2>\" + item.docInfo[2] else \"\";
  res := item.head + docInfo + item.interface + item.short + item.contents + revision + version + \"</body>\";
end itemString;

function itemFile
  input Item item;
  output String file := item.file;
end itemFile;

function toHtml
  input String str;
  output String ostr := OpenModelica.Scripting.stringReplace(OpenModelica.Scripting.stringReplace(OpenModelica.Scripting.stringReplace(str,\"&\",\"&amp;\"),\"<\",\"&lt;\"),\">\",\"&gt;\");
end toHtml;

record Item
  String file;
  String head;
  String docInfo[2];
  String contents;
  String comment;
  String interface;
  String short;
end Item;

function stringAdd
  input String a,b;
  output String c := a+b;
end stringAdd;
");

"Start calculate items";
echo(false);
items:={Item(
      filename(OpenModelica.Scripting.typeNameString(c))+".html",
      head(OpenModelica.Scripting.typeNameStrings(c)),
      OpenModelica.Scripting.getDocumentationAnnotation(c),
      preSuffixIfNotEmpty(
        "<h2>Contents</h2>\n<table><tr><th>Name</th><th>Description</th></tr>",
        sum("<tr><td><a href=\"" + filename(OpenModelica.Scripting.typeNameString(cl)) + ".html\">" +
             last(OpenModelica.Scripting.typeNameStrings(cl)) + "</a></td>" + "<td>" +
              toHtml(OpenModelica.Scripting.getClassComment(cl)) +
             "</td></tr>\n"
             for cl in OpenModelica.Scripting.getClassNames(c,qualified=true,sort=true)),
        "</table>"
        ),
      toHtml(OpenModelica.Scripting.getClassComment(c)),
      preSuffixIfNotEmpty("\n<h4><a name=\"interface\">Interface</a></h4>\n<blockquote><pre>",toHtml(OpenModelica.Scripting.list(c,interfaceOnly=true)),"</pre></blockquote>"),
      preSuffixIfNotEmpty("\n<h4><a name=\"definition\">Definition</a></h4>\n<blockquote><pre>",toHtml(OpenModelica.Scripting.list(c,shortOnly=true)),"</pre></blockquote>")
    ) for c in allClassNames};
echo(true);
"Start writing items to file";
echo(false);
writeFile(stringAdd(targetDir,itemFile(items)) /* Vector of filenames */,itemString(items,version) /* Vector of file contents */);
stringAdd(targetDir,itemFile(items));
getErrorString();

echo(true);
"Finished writing " + String(size(items,1)) + " items";
echo(false);

dirs := "";
replaceCommands := "";
filetmp := stringAdd(targetDir,"index.html");
writeFile(filetmp, "<html><head><title>Modelica Documentation</title><link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\" /></head><body><h1>Modelica Documentation</h1>\n");
writeFile(filetmp, "<p>This is a listing of the available documentation of the Modelica Standard Library and its related libraries.</p>\n", append = true);
writeFile(filetmp, "<h2>Libraries</h2>\n", append = true);
writeFile(filetmp, "<table><tr><th>Name</th><th>Description</th><th>Version</th></tr>", append = true);
for cl in classNames loop
  file := getSourceFile(cl);
  base := basename(file);
  if base <> "ModelicaBuiltin.mo" then
    base := basename(file);
    contentStrToks := typeNameStrings(cl);
    modelVersion := getVersion(cl);
    if base == "package.mo" then
      /* The replaceCommands are used in the Python-script generated later. These are sed-style replacements with & as delimiter to avoid escaping slashes. */
      // replaceCommands := replaceCommands + "\n (re.compile('^[Mm][Oo][Dd][Ee][Ll][Ii][Cc][Aa]://"+contentStrToks[end]+"/'),'"+dirname(file)+"/'),";
      replaceCommands := replaceCommands + "\n (re.compile(r'^[Mm][Oo][Dd][Ee][Ll][Ii][Cc][Aa]://"+contentStrToks[end]+"/'),'"+relativeRootDir+contentStrToks[end]+"/'),";
      dirpaths := strtok(dirname(file),"/");
      dirs := dirs + " \"" + dirpaths[end] + "\" ";
    end if;
    comment := OpenModelica.Scripting.stringReplace(getClassComment(cl),"&","&amp;"); // lets escape "&" on the fly
    contentStr := typeNameString(cl);
    fileName := filename(contentStr);
    writeFile(filetmp, "<tr><td><a href=\"" + fileName + ".html\">" + contentStrToks[end] + "</a></td><td>" + comment + "</td><td>" + modelVersion + "</td></tr>", append = true);
  end if;
end for;
writeFile(filetmp, "</table>\n", append = true);

if genBuiltin then
  writeFile(filetmp, "<h2>Builtin Environment</h2>\n", append = true);
  writeFile(filetmp, "<p>This is a listing of builtin Modelica functions of OpenModelica and the documentation for OpenModelica-specific scripting.</p>\n", append = true);

  writeFile(filetmp, "<table><tr><th>Name</th><th>Description</th><th>Version</th></tr>", append = true);
  for cl in classNames loop
    file := getSourceFile(cl);
    base := basename(file);
    if base == "ModelicaBuiltin.mo" then
      contentStr := typeNameString(cl);
      contentStrToks := typeNameStrings(cl);
      modelVersion := getVersion(cl);
      comment := OpenModelica.Scripting.stringReplace(getClassComment(cl),"&","&amp;"); // lets escape "&" on the fly
      fileName := filename(contentStr);
      writeFile(filetmp, "<tr><td><a href=\"" + fileName + ".html\">" + contentStrToks[end] + "</a></td><td>" + comment + "</td><td>" + modelVersion + "</td></tr>", append = true);
    end if;
  end for;
  writeFile(filetmp, "</table>\n", append = true);
end if;
//writeFile(filetmp, version + " (<a href=\"ModelicaDocumentation.tar.xz\">Offline version</a>)", append = true);
writeFile(filetmp, version, append = true);
writeFile(filetmp, "</body>\n</html>", append = true);

writeFile("Tidy.py","#!/usr/bin/env python
from __future__ import with_statement
from BeautifulSoup import BeautifulSoup
import subprocess as sub
import re
import glob
import sys
import os

os.chdir('"+targetDir+"') # this is needed for check_local_files()

repls = ["+replaceCommands+"
 (re.compile(r'/Modelica/'), r'/Modelica%20"+relVer+"/'),
 (re.compile(r' '), r'%20'),
 (re.compile(r'[Mm][Oo][Dd][Ee][Ll][Ii][Cc][Aa]://([A-Za-z0-9.\\'()_-]*)#'), r'\\1.html#'),
 (re.compile(r'[Mm][Oo][Dd][Ee][Ll][Ii][Cc][Aa]://([A-Za-z0-9.\\'()_-]*)'), r'\\1.html'),
]

def linkreplace(link):
  for (regex,repl) in repls:
    try:
      link = regex.sub(repl,link)
    except:
      pass
  return link

def check_local_files(uri):
  uri = uri.replace('%20', ' ')
  with open('MissingFiles.log', 'a') as log_file:
    if not uri.startswith(('http://','https://','mailto:','ftp://','#')):
      filename = uri.split('#', 1)[0]
      if not os.path.exists(filename):
        log_msg = tag+'Not found: %s\\n' % uri
	sys.stdout.write(log_msg)
        log_file.write(log_msg) # lets also record that in the log file

for filepath in sorted(glob.glob('"+targetDir+"*.html')):
  tag = '[Checking file %s]:\\n' % filepath
#  sys.stdout.write(tag)  # not much point in writing the tags to stdout
  sys.stderr.write(tag)
  pid = sub.call(['tidy', '-modify', '-quiet', filepath])
  if pid <> 2:
    with open(filepath,'r') as html_file:
      soup = BeautifulSoup(html_file)
      for a in soup.findAll('a'):
        try:
          a['href'] = linkreplace(a['href'])
	  check_local_files(a['href'])
        except:
          pass
      for img in soup.findAll('img'):
        try:
          img['src'] = linkreplace(img['src'])
	  check_local_files(img['src'])
        except:
          pass
    with open(filepath,'w') as html_file:
      html_file.write(soup.__str__())
  else:
    print('Tidy failed with %s, skipping link-replacement for %s!'  % (pid,filepath))
");

writeFile(stringAdd(targetDir,"style.css"),"
h1
{
    font-family: mono;
    font-size: x-large;
    color:rgb(153,0,0);
}

h1 a {font-size:large;}

table
{
    border-color: black;
    border-width: 1px 1px 1px 1px;
    border-style: solid;
    border-spacing: 0;
    border-collapse: collapse;
}

table td,th
{
    border-color: black;
    border-width: 1px 1px 1px 1px;
    border-style: solid;
    margin: 0;
    padding: 4px;
}

pre
{
    white-space: pre-wrap; /* CSS 3 */
}
");

writeFile("FilterTidy.sh","#!/bin/bash
grep -v DOCTYPE tidy.err | grep -v \"<body>\" |grep -v \"<html>\\|</html>\" |grep -v lacks |grep -v apos | grep -B1 Warning > tidy.filtered
");

echo(true);
"Removing previous generation output files...";
system("rm -f tidy.out tidy.err tidy.filtered");

"Copying original HTML files to 'old-html-tmp'";
system("mkdir -p old-html-tmp");
system("cp \""+targetDir+"\"*.html old-html-tmp/");
"Copying generation script to the help directory";
system("cp genDocOMC.mos \""+targetDir+"\"");

"Tidy.py";
system("python Tidy.py 2> tidy.err");

"FilterTidy.sh";
system("bash FilterTidy.sh");

//system("rm -f ModelicaDocumentation.tar.xz");
//system("mkdir -p " + dirs);
//"tar";
//dirs;
//cmd := "tar cJf ModelicaDocumentation.tar.xz --dereference style.css *.html " + dirs + " genDocOMC.mos FindFiles.log tidy.log";
//system(cmd);
getErrorString();
